"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var del = require("del");
var fs = require("fs");
var vinylPaths = require("vinyl-paths");
var path = require("path");
function generate(gulp, config, gulptraum) {
    var buildOutputFolderPath = path.resolve(config.paths.root, config.paths.output);
    var docsOutputFolderPath = path.resolve(config.paths.root, config.paths.doc);
    var testsFolderPath = path.resolve(config.paths.root, config.paths.tests);
    gulptraum.task('build-typescript-clean', {
        help: 'Cleans the files compiled from your TypeScript source code'
    }, function () {
      // NOTE: Glob-Stream now throws an error by default, if a directly was not found.
      // We can't directly access that lib from here, so we need to check if the directory
      // exists ourselves.
      if (!fs.existsSync(buildOutputFolderPath)) {
        return;
      }
      const deleteFiles = (patterns) => {
        return del(patterns, {
          nonull: false,
        })
      };
      return gulp
        .src(`${buildOutputFolderPath}`)
        .pipe(vinylPaths(deleteFiles));
    });
    gulptraum.task('doc-typescript-clean', {
      help: 'Cleans all documentation files generated by the TypeScript plugin'
    }, function () {
        // NOTE: Glob-Stream now throws an error by default, if a directly was not found.
        // We can't directly access that lib from here, so we need to check if the directory
        // exists ourselves.
        if (!fs.existsSync(docsOutputFolderPath)) {
          return;
        }
        const deleteFiles = (patterns) => {
          return del(patterns, {
            nonull: false,
          })
        };

        return gulp
          .src(`${docsOutputFolderPath}`)
          .pipe(vinylPaths(deleteFiles));
    });
    gulptraum.task('test-typescript-clean', {
        help: 'Cleans all test files built by the TypeScript plugin'
    }, function () {
        // NOTE: Glob-Stream now throws an error by default, if a directly was not found.
        // We can't directly access that lib from here, so we need to check if the directory
        // exists ourselves.
        if (!fs.existsSync(testsFolderPath)) {
          return;
        }
        const deleteFiles = (patterns) => {
          return del(patterns, {
            allowEmpty: true,
            nonull: false,
          })
        };

        return gulp
          .src(`${testsFolderPath}`)
          .pipe(vinylPaths(deleteFiles));
    });
    gulptraum.task('clean-typescript', {
        help: 'Cleans all files generated by the TypeScript plugin'
    }, function (callback) {
        var tasks = [
            'build-typescript-clean',
            'test-typescript-clean',
            'doc-typescript-clean',
        ];
        return gulptraum.gulpAdapter.runTasksSequential(tasks, callback);
    });
}
exports.generate = generate;

//# sourceMappingURL=clean.js.map
