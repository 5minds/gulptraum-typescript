"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var del = require("del");
var path = require("path");
var vinylPaths = require("vinyl-paths");
function generate(gulp, config, gulptraum) {
    var buildOutputFolderPath = path.resolve(config.paths.root, config.paths.output);
    var docsOutputFolderPath = path.resolve(config.paths.root, config.paths.doc);
    var testsFolderPath = path.resolve(config.paths.root, config.paths.testOutput);
    gulptraum.task('build-typescript-clean', {
        help: 'Cleans the files compiled from your TypeScript source code'
    }, function () {
        return gulp
            .src("" + buildOutputFolderPath, { allowEmpty: true })
            .pipe(vinylPaths(del));
    });
    gulptraum.task('doc-typescript-clean', {
        help: 'Cleans all documentation files generated by the TypeScript plugin'
    }, function () {
        return gulp
            .src("" + docsOutputFolderPath, { allowEmpty: true })
            .pipe(vinylPaths(del));
    });
    gulptraum.task('test-typescript-clean', {
        help: 'Cleans all test files built by the TypeScript plugin'
    }, function () {
        return gulp
            .src("" + testsFolderPath, { allowEmpty: true })
            .pipe(vinylPaths(del));
    });
    gulptraum.task('clean-typescript', {
        help: 'Cleans all files generated by the TypeScript plugin'
    }, function (callback) {
        var tasks = [
            'build-typescript-clean',
            'test-typescript-clean',
            'doc-typescript-clean',
        ];
        return gulptraum.gulpAdapter.runTasksSequential(tasks, callback);
    });
}
exports.generate = generate;

//# sourceMappingURL=clean.js.map
