import * as del from 'del';
import * as Gulp from 'gulp';
import * as path from 'path';
import * as vinylPaths from 'vinyl-paths';

export function generate(gulp: Gulp.Gulp, config, gulptraum): void {

  const buildOutputFolderPath = path.resolve(config.paths.root, config.paths.output);
  const docsOutputFolderPath = path.resolve(config.paths.root, config.paths.doc);
  const testsFolderPath = path.resolve(config.paths.root, config.paths.tests);

  gulptraum.task('build-typescript-clean', {
    help: 'Cleans the files compiled from your TypeScript source code'
  }, () => {
    return gulp
      .src(`${buildOutputFolderPath}`, {allowEmpty: true})
      .pipe(vinylPaths(del));
  });

  gulptraum.task('doc-typescript-clean', {
    help: 'Cleans all documentation files generated by the TypeScript plugin'
  }, () => {
    return gulp
      .src(`${docsOutputFolderPath}`, {allowEmpty: true})
      .pipe(vinylPaths(del));
  });

  gulptraum.task('test-typescript-clean', {
    help: 'Cleans all test files built by the TypeScript plugin'
  }, () => {
    return gulp
      .src(`${testsFolderPath}`, {allowEmpty: true})
      .pipe(vinylPaths(del));
  });

  gulptraum.task('clean-typescript', {
    help: 'Cleans all files generated by the TypeScript plugin'
  }, (callback) => {

    const tasks = [
      'build-typescript-clean',
      'test-typescript-clean',
      'doc-typescript-clean',
    ];

    return gulptraum.gulpAdapter.runTasksSequential(tasks, callback);
  });

}
