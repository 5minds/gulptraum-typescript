import * as del from 'del';
import * as fs from 'fs';
import * as path from 'path';
import * as vinylPaths from 'vinyl-paths';

export function generate(gulp, config, gulptraum): void {

  const buildOutputFolderPath = path.resolve(config.paths.root, config.paths.output);
  const docsOutputFolderPath = path.resolve(config.paths.root, config.paths.doc);
  const testsFolderPath = path.resolve(config.paths.root, config.paths.tests);

  gulptraum.task('build-typescript-clean', {
    help: 'Cleans the files compiled from your TypeScript source code'
  }, () => {
    // NOTE: Glob-Stream now throws an error by default, if a directly was not found.
    // We can't directly access that lib from here, so we need to check if the directory
    // exists ourselves.
    if (!fs.existsSync(buildOutputFolderPath)) {
      return;
    }

    const deleteFiles: any = (patterns) => {
      return del(patterns, {
        nonull: false,
      })
    };

    return gulp
      .src(`${buildOutputFolderPath}`)
      .pipe(vinylPaths(deleteFiles));
  });

  gulptraum.task('doc-typescript-clean', {
    help: 'Cleans all documentation files generated by the TypeScript plugin'
  }, () => {
    // NOTE: Glob-Stream now throws an error by default, if a directly was not found.
    // We can't directly access that lib from here, so we need to check if the directory
    // exists ourselves.
    if (!fs.existsSync(docsOutputFolderPath)) {
      return;
    }
    const deleteFiles: any = (patterns) => {
      return del(patterns, {
        nonull: false,
      })
    };

    return gulp
      .src(`${docsOutputFolderPath}`)
      .pipe(vinylPaths(deleteFiles));
  });

  gulptraum.task('test-typescript-clean', {
    help: 'Cleans all test files built by the TypeScript plugin'
  }, () => {
    // NOTE: Glob.js now throws an error by default, if a directly was not found.
    // We must pass a config to "del", telling glob.js not to do that.
    const deleteFiles: any = (patterns) => {
      return del(patterns, {
        nonull: false,
      })
    };

    return gulp
      .src(`${testsFolderPath}`)
      .pipe(vinylPaths(deleteFiles));
  });

  gulptraum.task('clean-typescript', {
    help: 'Cleans all files generated by the TypeScript plugin'
  }, (callback) => {

    const tasks = [
      'build-typescript-clean',
      'test-typescript-clean',
      'doc-typescript-clean',
    ];

    return gulptraum.gulpAdapter.runTasksSequential(tasks, callback);
  });

}
